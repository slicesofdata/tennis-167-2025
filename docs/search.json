[
  {
    "objectID": "pages/my_fourth_page.html",
    "href": "pages/my_fourth_page.html",
    "title": "Page example",
    "section": "",
    "text": "# do not display the code on your website\n\n# read and clean the data\n#source( &lt;-- data cleaning path and file name --&gt;)\n\n# read cleaned and plot data\n#source( &lt;-- data plotting file name --&gt;)"
  },
  {
    "objectID": "pages/my_fourth_page.html#sub-section-level-2",
    "href": "pages/my_fourth_page.html#sub-section-level-2",
    "title": "Page example",
    "section": "Sub-Section (Level #2)",
    "text": "Sub-Section (Level #2)\n\nOur Plot! (Level #3)\nThe plot may feel stretched. If this is the case, you will want to determine good plot-saving settings for a website.\nFor example, controlling the plot saving parameter argument of ggplot::sggsave() using units = \"px\" (pixels) and specifying the width (in pixels) and height (in pixels) may be a good approach. You can determine what pixel dimensions would be good for a webpage by doing and Internet search.\nExample:\n\nwidth    = 1600\nheight   = 1100\nunits    = \"px\"\ndpi      = 200 # or \"retina\"\n\n\n\n\nPlot with width configurations\n\n\n\nOur Plot with width configurations"
  },
  {
    "objectID": "pages/my_second_page.html",
    "href": "pages/my_second_page.html",
    "title": "Key Directories",
    "section": "",
    "text": "Building a website requires management of relevatn files, which you must keep our files organized and easily accessible. A well-structured directory helps us to collaborate efficiently, reduce errors, and facilitate project maintenance. Let’s explore the purpose of each file or directory."
  },
  {
    "objectID": "pages/my_second_page.html#project-directory-structure",
    "href": "pages/my_second_page.html#project-directory-structure",
    "title": "Key Directories",
    "section": "Project Directory Structure",
    "text": "Project Directory Structure\n.\n├── .git\n├── .gitignore\n├── .nojekyll\n├── .quarto\n├── about.qmd\n├── blog/\n│   ├── _metadata.yml\n│   ├── index.qmd\n│   └── posts/\n├── figs/\n├── fonts/\n│   └── fontawesome.html\n├── images/\n│   ├── icons/\n│   ├── random_png.png\n│   └── profile.jpg\n├── index.qmd\n├── pages/\n│   ├── my_first_page.qmd\n│   └── my_second_page.qmd\n├── prerender.R  &lt;-------------------------------------------------\n├── &lt;projectname&gt;.Rproj\n├── robots.txt\n└── src/\n    ├── data/\n    ├── figs/\n    ├── functions/\n    │   ├── fig_saving.R\n    │   ├── fig_theme.R\n    │   ├── load_libraries.R\n    │   └── view_html.R\n    ├── starter_script_file.R\n    └── utils/\n        └── made-of-code.tmTheme\n└── styles/"
  },
  {
    "objectID": "pages/my_second_page.html#configuration-files",
    "href": "pages/my_second_page.html#configuration-files",
    "title": "Key Directories",
    "section": "Configuration Files",
    "text": "Configuration Files\nThese configuration files are stored in the project root (.) directory:\n\n.git: contains Git version control system files (do not delete)\n.gitignore: specifies files and directories that Git should ignore (e.g, your .Renviron, .Rprofile, and other sensitive details) (do not delete)\n.nojekyll: tells GitHub Pages not to use Jekyll to build the site\n.quarto: for Quarto-specific configuration files."
  },
  {
    "objectID": "pages/my_second_page.html#website-files-and-directories",
    "href": "pages/my_second_page.html#website-files-and-directories",
    "title": "Key Directories",
    "section": "Website Files and Directories",
    "text": "Website Files and Directories\n\nabout.qmd: a website about page (do not delete)\ndocs/: for all rendered website files\nindex.qmd: a website start page (do not delete)\npages/: for individual web pages \nrobots.txt: This file specifies how search engines should crawl our site.\nstyles/: for website theme related files"
  },
  {
    "objectID": "pages/my_second_page.html#source-code",
    "href": "pages/my_second_page.html#source-code",
    "title": "Key Directories",
    "section": "Source Code",
    "text": "Source Code\nThe src/ directory contains our project source code:\nsrc/\n  data/\n  figs/\n  functions/\n    fig_saving.R\n    fig_theme.R\n    load_libraries.R\n    view_html.R\n  starter_script_file.R\n  utils/\n    made-of-code.tmTheme\n\ndata/: for data, raw/ and processed/\nfigs/: for .png figures created with {ggplot2} code\nfunctions/: reusable functions needed for the project\nutils/: for project utility files"
  },
  {
    "objectID": "pages/my_second_page.html#figures-and-images",
    "href": "pages/my_second_page.html#figures-and-images",
    "title": "Key Directories",
    "section": "Figures and Images",
    "text": "Figures and Images\nThe following directories contain figures and image files:\nfigs/\nimages/\n  icons/\n\nfigs/: for figures generated by code\nimages/: for image files\nicons/: for icon files\nrandom_png.png and profile.jpg: example files"
  },
  {
    "objectID": "pages/my_second_page.html#brand-directory",
    "href": "pages/my_second_page.html#brand-directory",
    "title": "Key Directories",
    "section": "Brand Directory",
    "text": "Brand Directory\nbrand/\n\nbrand/: for _brand.yml and related files"
  },
  {
    "objectID": "pages/my_second_page.html#blog-directory",
    "href": "pages/my_second_page.html#blog-directory",
    "title": "Key Directories",
    "section": "Blog Directory",
    "text": "Blog Directory\nThe blog directory contains files related to our project blog:\nblog/\n  _metadata.yml\n  index.qmd\n  posts/"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Site Name",
    "section": "",
    "text": "Welcome to Site Name! Blah, blah…\n\n\nThis simple site serves as the core template for building your website and is designed to communicate elements of building your plots, pages, and content for a webpage. You will build a Quarto website for a target audience to communicate data visualized in ways to communicate patterns, trends, in data or to tell a story about data. There are more advanced styling you can modify with Quarto websites but this template is a good starting point if you are unfamiliary with Quarto.\n\n\n\n\n\n\nExploratory Data Stories\n\nPurpose: Allows visitors to interact with data to explore patterns and relationships.\nSome Characteristic:\n\nGuided narrative plus visualizations\n\nUser-driven discovery (obviates raw data analysis skills)\n\n\nDemonstrates that you can you can clean and wrangle raw open data, but also combine storytelling and data interpretation.\n\nAnalytical Decision-Support Tools\n\nPurpose: Help professionals understand data and make informed choices.\nSome Characteristic:\n\nMultiple data metrics\nProvides different slices/groupings of data\n\nDemonstrates that you can clean and wrangle raw open data and can work with complex data sets that support business decisions directly.\n\nPublic Transparency & Open Data Portals\n\nPurpose: Share government or research data in a user-friendly way for either accountability or public engagement or both.\nSome Characteristics:\n\nClear, accessible visuals for non-expert audiences\n\nOpen data downloads\n\nTrend and comparison features\n\nDemonstrates you can clean and wrangle raw open data, combine multiple data sources, and provide value to otherwise stagnant data.\n\n\n\n\n\n\n\n\n\nSave files in random places (see directory structure)\nHard-code paths (e.g., /myusername/directory/subdirectory/file.R or C:/myusername/directory/subdirectory/file.R)\nImport or process data without code\nSave/export plot files without code\nUse the R Studio Git GUI\nUse spaces for directory names or file names\nuse UPPERCASE characters in directories and file names\n\n\n\n\n\nSave files in a directory structure\nReference directory and file paths using the {here} library\n\nby importing files using code\nby saving/exporting files using code\n\nUse Git commands in the RStudio terminal\nUse machine-readable file paths (e.g., directory and file names)\n\nby replacing spaces with _ or - (choose one)\nby making all characters lowercase\n\n\n\n\n\n\n\n\nDevelop Website Content\n\nModify a _quarto.yml (YAML) config file for the page structure, options, and configuration\nStructure Quarto .qmd input files for the website pages (e.g., index.qmd, about.qmd, etc.)\nAdd text content for the input file pages\nRender website files using Build &gt; Render Website or {quarto} library; See here for more details\nPush to GitHub and manage in GitHub Pages\n\nMaintain File Organization\n\nOrganize directories and files\nMaintain a directory structure\n\nCreate Data File(s) and Scripts\n\nSave data files in appropriate directory in data/ (e.g., data/raw/)\nWrite .R scripts for cleaning and summarizing data using {tidyverse} libraries\nSave data-related scripts in src/data/ using meaningful and standardized names\nSave cleaned/processed data files data/processed/\n\nCreate Plot Scripts, Functions, and Files\n\nScripts\n\nWrite .R scripts for creating plots using {ggplot}\nSave plot-related scripts in src/figs/ using meaningful and standardized names\n\nFunction Script(s)\n\nWrite a function to ensure uniform saving of plots using ggplot2::ggsave() and save function in src/figs/ so that you can apply it systematically to format plot objects\n\nPlot Files\n\nSave plots/figures as .png files in figs/ making sure to use unique names for each plot\nLink .png files inside webpages so they load\n\n(Optional) Customize a Website Theme\n\nCreate a custom.scss Sass file to manage color schemes and save in styles/ or create a _brand.yml file\nAdditional theme tips can be found here\n\n\n\n\n\n\n\n\nggplot2 Reference\nTips for website pages Other\nQuarto Documentation\nQuarto Websites\nTheming with a _brand.yml, example here\nMore on Brand YML\nOther Theming"
  },
  {
    "objectID": "index.html#about-this-site",
    "href": "index.html#about-this-site",
    "title": "Site Name",
    "section": "",
    "text": "This simple site serves as the core template for building your website and is designed to communicate elements of building your plots, pages, and content for a webpage. You will build a Quarto website for a target audience to communicate data visualized in ways to communicate patterns, trends, in data or to tell a story about data. There are more advanced styling you can modify with Quarto websites but this template is a good starting point if you are unfamiliary with Quarto."
  },
  {
    "objectID": "index.html#types-of-your-data-visualization-website",
    "href": "index.html#types-of-your-data-visualization-website",
    "title": "Site Name",
    "section": "",
    "text": "Exploratory Data Stories\n\nPurpose: Allows visitors to interact with data to explore patterns and relationships.\nSome Characteristic:\n\nGuided narrative plus visualizations\n\nUser-driven discovery (obviates raw data analysis skills)\n\n\nDemonstrates that you can you can clean and wrangle raw open data, but also combine storytelling and data interpretation.\n\nAnalytical Decision-Support Tools\n\nPurpose: Help professionals understand data and make informed choices.\nSome Characteristic:\n\nMultiple data metrics\nProvides different slices/groupings of data\n\nDemonstrates that you can clean and wrangle raw open data and can work with complex data sets that support business decisions directly.\n\nPublic Transparency & Open Data Portals\n\nPurpose: Share government or research data in a user-friendly way for either accountability or public engagement or both.\nSome Characteristics:\n\nClear, accessible visuals for non-expert audiences\n\nOpen data downloads\n\nTrend and comparison features\n\nDemonstrates you can clean and wrangle raw open data, combine multiple data sources, and provide value to otherwise stagnant data."
  },
  {
    "objectID": "index.html#coding-dos-and-donts",
    "href": "index.html#coding-dos-and-donts",
    "title": "Site Name",
    "section": "",
    "text": "Save files in random places (see directory structure)\nHard-code paths (e.g., /myusername/directory/subdirectory/file.R or C:/myusername/directory/subdirectory/file.R)\nImport or process data without code\nSave/export plot files without code\nUse the R Studio Git GUI\nUse spaces for directory names or file names\nuse UPPERCASE characters in directories and file names\n\n\n\n\n\nSave files in a directory structure\nReference directory and file paths using the {here} library\n\nby importing files using code\nby saving/exporting files using code\n\nUse Git commands in the RStudio terminal\nUse machine-readable file paths (e.g., directory and file names)\n\nby replacing spaces with _ or - (choose one)\nby making all characters lowercase"
  },
  {
    "objectID": "index.html#for-building-your-website-you-will",
    "href": "index.html#for-building-your-website-you-will",
    "title": "Site Name",
    "section": "",
    "text": "Develop Website Content\n\nModify a _quarto.yml (YAML) config file for the page structure, options, and configuration\nStructure Quarto .qmd input files for the website pages (e.g., index.qmd, about.qmd, etc.)\nAdd text content for the input file pages\nRender website files using Build &gt; Render Website or {quarto} library; See here for more details\nPush to GitHub and manage in GitHub Pages\n\nMaintain File Organization\n\nOrganize directories and files\nMaintain a directory structure\n\nCreate Data File(s) and Scripts\n\nSave data files in appropriate directory in data/ (e.g., data/raw/)\nWrite .R scripts for cleaning and summarizing data using {tidyverse} libraries\nSave data-related scripts in src/data/ using meaningful and standardized names\nSave cleaned/processed data files data/processed/\n\nCreate Plot Scripts, Functions, and Files\n\nScripts\n\nWrite .R scripts for creating plots using {ggplot}\nSave plot-related scripts in src/figs/ using meaningful and standardized names\n\nFunction Script(s)\n\nWrite a function to ensure uniform saving of plots using ggplot2::ggsave() and save function in src/figs/ so that you can apply it systematically to format plot objects\n\nPlot Files\n\nSave plots/figures as .png files in figs/ making sure to use unique names for each plot\nLink .png files inside webpages so they load\n\n(Optional) Customize a Website Theme\n\nCreate a custom.scss Sass file to manage color schemes and save in styles/ or create a _brand.yml file\nAdditional theme tips can be found here"
  },
  {
    "objectID": "index.html#other-useful-project-related-resources",
    "href": "index.html#other-useful-project-related-resources",
    "title": "Site Name",
    "section": "",
    "text": "ggplot2 Reference\nTips for website pages Other\nQuarto Documentation\nQuarto Websites\nTheming with a _brand.yml, example here\nMore on Brand YML\nOther Theming"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "My blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nMy great title\n\n\n\n\n\n\ndata\n\n\ndogs\n\n\nanimals\n\n\n\n\n\n\n\n\n\nJan 1, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Website Title",
    "section": "",
    "text": "This site …\nSome about page tips are also available."
  },
  {
    "objectID": "blog/posts/firstpost.html",
    "href": "blog/posts/firstpost.html",
    "title": "My great title",
    "section": "",
    "text": "My post text goes here …"
  },
  {
    "objectID": "pages/my_first_page.html",
    "href": "pages/my_first_page.html",
    "title": "Page example",
    "section": "",
    "text": "Quarto files are structured similar to R Markdown files. You can bold and italicize text, create hyperlinks, and also bullet items among other things. There is a lot you can do with Quarto for building, website.\n\nFormatting\nUse headers\nWrite formatted content\nDisplaying plots and images\nLink to other websites\nLink to other pages on this site"
  },
  {
    "objectID": "pages/my_first_page.html#header-level-2-tips-for-linkingdisplaying-figures-and-images.",
    "href": "pages/my_first_page.html#header-level-2-tips-for-linkingdisplaying-figures-and-images.",
    "title": "Page example",
    "section": "Header Level 2: Tips for linking/displaying figures and images.",
    "text": "Header Level 2: Tips for linking/displaying figures and images.\n\nHeader Level 3: Linking to a Plot/Fig\n\nWrite you code to create your plot and save it. Save this script in src/figs. The source code does not need to be on the website.\nEnsure that your plot is saved to figs/ by referencing the path with {here}.\nAt the top of the .qmd file for your page, add a code block that source()s the script that will generate the plot you wish displayed on that page.\n\nFor example:\nsource(here::here(\"figs\", \"point_mpg_by_wt.R\"))`\nMake sure to edit the code block so that the code runs only (no output).\nNOTE: Code blocks that appear in .qmd files will call .R files only. Do NOT embed code blocks in your .qmd file(s) that will process data or create plots directly. Reserve .qmd files for website text, sourcing script files, and calling .png plot files. Developers and engineers compartmentalize project elements and do not combine all content into a single files. Doing so creates many problems not limited to code breaking and code-repair problems, Git merge problems, etc. You will follow a similar practice of breaking the project into pieces, save those files, and push them to the remote repository weekly for your team members.\nThis code-source()ing step also ensures that plot(s) are (re)created when Quarto rendering the website build files. You certainly want this feature so that new website elements and files are built during the rendering process. A full website re-build, however, is unnecessary when no element of the website changes other than the images and figures embedded within it. As a result, re-builds are not always necessary and will increase update time."
  },
  {
    "objectID": "pages/my_first_page.html#header-level-2-optional-circumventing-a-full-website-build",
    "href": "pages/my_first_page.html#header-level-2-optional-circumventing-a-full-website-build",
    "title": "Page example",
    "section": "Header Level 2: (Optional) Circumventing a Full Website Build",
    "text": "Header Level 2: (Optional) Circumventing a Full Website Build\nSometimes the main structure of your website is untouched but you have new data and you need to run a rebuild of your plots. Although re-rendering is not problematic, it might just take longer than you desire. If you don’t need to render the website and just want to build files, the following is a solution, though requires some extra work.\nTo avoid a full site rebuild (re-render) when you simply want to create and git push new plots:\n\nAdd your source()ing code to a separate file, for example, call_scripts/call_plot_scripts.qmd.\nAdd a code block to source individual .R files or all .R files in a directory.\n\nExample:\n#| include: false\n\n# source a script file that this page depends on\nsource(here::here(\"figs\", \"point_mpg_by_wt.R\"))\n\nThis .qmd file will render and create the .png files you need in your specified directory but the page will not be linked on your website. Technically, it will be visible at https://the_url/call_scripts/call_plot_scripts.html but this will be difficult to find. You can always remove the file or directory after rendering the website if you want to remove it completely.\n\n\nLink the plot .png file in your .qmd file.\n\nOnce you know the name and location of the file, you can reference it like this, where the .png file is being pulled from figs/:\n\n\n\na plot description\n\n\n\nLinking to Image Example\nSimilarly, save your image in a folder like images/, and use this format to show it:\n\n\n\nshort description if necessary"
  },
  {
    "objectID": "pages/my_first_page.html#hyperlinks-to-internal-website-pages",
    "href": "pages/my_first_page.html#hyperlinks-to-internal-website-pages",
    "title": "Page example",
    "section": "Hyperlinks to internal website pages",
    "text": "Hyperlinks to internal website pages\n\nExternal Websites\nRefer to an outside url:\nText to display\n\n\nInternal website Pages\nRefer to the rendered HTML files:\n\nVisit the Home Page\nRead the About Page\nGot to another page\n\n\nTip: LInk to .html files and not the .qmd file."
  },
  {
    "objectID": "pages/my_third_page.html",
    "href": "pages/my_third_page.html",
    "title": "Page example",
    "section": "",
    "text": "Overview\nText here …"
  },
  {
    "objectID": "pages/team_test_page.html",
    "href": "pages/team_test_page.html",
    "title": "Page example",
    "section": "",
    "text": "# do not display the code block on your website. \n# to disable, select the 'show nothing run code' option from the gear set of options \n\n# read and clean the data\n#source( &lt;-- data cleaning path and file name --&gt;)\n\n# read cleaned and plot data\n#source( &lt;-- data plotting file name --&gt;)"
  },
  {
    "objectID": "pages/team_test_page.html#sub-section-level-2",
    "href": "pages/team_test_page.html#sub-section-level-2",
    "title": "Page example",
    "section": "Sub-Section (Level #2)",
    "text": "Sub-Section (Level #2)\n\nOur Plot! (Level #3)\nThe plot may feel stretched. If this is the case, you will want to determine good plot-saving settings for a website.\nFor example, controlling the plot saving parameter argument of ggplot::sggsave() using units = \"px\" (pixels) and specifying the width (in pixels) and height (in pixels) may be a good approach. You can determine what pixel dimensions would be good for a webpage by doing and Internet search.\nExample:\n\nwidth    = 1600\nheight   = 1100\nunits    = \"px\"\ndpi      = 200 # or \"retina\"\n\n\n\n\n\nsome caption\n\n\n\n\nPlot with width configurations\n\n\n\na different caption\n\n\n\n\nOur Plot with width configurations and no caption"
  }
]